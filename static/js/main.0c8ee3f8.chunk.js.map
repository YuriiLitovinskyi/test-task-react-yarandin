{"version":3,"sources":["components/films/FilmItem.js","components/films/FilmFilter.js","actions/FilmsActions.js","actions/Types.js","components/films/Films.js","components/pages/Home.js","components/layout/Navbar.js","components/pages/About.js","components/films/StarshipItem.js","components/films/PlanetItem.js","components/films/Film.js","reducers/FilmsReducer.js","store.js","App.js","index.js"],"names":["FilmItem","film","index","className","style","stl","to","title","episode_id","director","release_date","float","marginLeft","marginRight","connect","state","filtered","filteredFilms","text","dispatch","type","payload","clearFilter","useRef","useEffect","current","value","ref","placeholder","onChange","e","target","films","sortType","getFilms","a","fetch","responce","json","results","console","error","sortAlphabetical","undefined","onClick","TransitionGroup","map","CSSTransition","key","timeout","classNames","Home","Navbar","id","defaultProps","About","starshipFilms","getStarshipFilms","arrayOfStarhipFilms","indexSth","Promise","all","shipFilmUrl","shipFilmResponse","number","item","starship","name","model","starship_class","max_atmosphering_speed","crew","passengers","planetFilms","getPlanetFilms","arrayOfPlanetFilms","planetFilmUrl","planetFilmResponse","planet","indexPln","climate","gravity","population","diameter","terrain","singleFilm","starships","planets","getSingleFilm","url","getStarships","arrayOfStarsips","shipUrl","shipResponse","getPlanets","arrayOfPlanets","planetUrl","planetResponse","props","Number","match","params","film_id","Object","entries","length","producer","opening_crawl","ind","initialState","middleware","thunk","store","createStore","action","filter","regex","RegExp","slice","sort","b","nameA","toLowerCase","nameB","composeWithDevTools","applyMiddleware","App","exact","path","component","Film","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c8ee3f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst FilmItem = ({ film, index }) => {\r\n    return (\r\n        <div className=\"row\" style={stl}>\r\n            <div className=\"col s12 m6\" style={stl}>\r\n                <Link to={`/${index}`}>\r\n                    <div className=\"card blue-grey darken-2\">\r\n                        <div className=\"card-content white-text center\">\r\n                            <span className=\"card-title\">{film.title}</span>\r\n                            <p>Episode {film.episode_id}</p>\r\n                            <p>Director: {film.director}</p>\r\n                            <p>Release date: {film.release_date}</p>\r\n                        </div>                       \r\n                    </div>\r\n                </Link>   \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nFilmItem.propTypes = {\r\n    film: PropTypes.object.isRequired,  \r\n    index: PropTypes.number.isRequired  \r\n};\r\n\r\nexport default FilmItem;\r\n\r\nconst stl = {\r\n    float: 'none',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto'\r\n}","import React, { useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { filteredFilms, clearFilter } from '../../actions/FilmsActions';\r\n\r\nconst FilmFilter = ({ filtered, filteredFilms, clearFilter }) => {\r\n\r\n    const text = useRef('');\r\n\r\n    useEffect(() => {\r\n        if(filtered === null){\r\n            text.current.value = '';\r\n        }\r\n    })\r\n\r\n    const onChange = (e) => {\r\n        if(text.current.value !== ''){\r\n            filteredFilms(e.target.value);\r\n        } else {\r\n            clearFilter();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"input\">\r\n            <input ref={text}  placeholder=\"Search a Film by Name...\" onChange={onChange}/>            \r\n        </form>\r\n    )\r\n}\r\n\r\nFilmFilter.propTypes = {      \r\n    filtered: PropTypes.array,   \r\n    filteredFilms: PropTypes.func.isRequired,\r\n    clearFilter: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({   \r\n    filtered: state.filtered  \r\n});\r\n\r\nexport default connect(mapStateToProps, { filteredFilms, clearFilter })(FilmFilter);","import { \r\n    GET_FILMS, \r\n    GET_SINGLE_FILM, \r\n    GET_STARSHIPS, \r\n    GET_PLANETS, \r\n    FILTERED_FILMS, \r\n    CLEAR_FILTER,     \r\n    SORT, \r\n    GET_STARSHIP_FILMS, \r\n    GET_PLANET_FILMS } from './Types';\r\n\r\nexport const getFilms = () => async (dispatch) => { \r\n\r\n    try {\r\n        const responce = await fetch('https://swapi.dev/api/films/');\r\n        const films = await responce.json();         \r\n    \r\n        dispatch({\r\n            type: GET_FILMS,\r\n            payload: films.results\r\n        });        \r\n    } catch (error) {\r\n        console.error(error);\r\n    }   \r\n};\r\n\r\nexport const getSingleFilm = (film) => async (dispatch) => {\r\n\r\n    try {\r\n        const responce = await fetch(`${film.url}`);\r\n        const singleFilm = await responce.json();         \r\n    \r\n        dispatch({\r\n            type: GET_SINGLE_FILM,\r\n            payload: singleFilm\r\n        });        \r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n\r\nexport const getStarships = (arrayOfStarsips) => async (dispatch) => { \r\n    \r\n    try {\r\n        let starships = await Promise.all(\r\n            arrayOfStarsips.map(async shipUrl => {\r\n                let shipResponse = await fetch(shipUrl)\r\n                return shipResponse.json()\r\n            })\r\n        )        \r\n    \r\n        dispatch({\r\n            type: GET_STARSHIPS,\r\n            payload: starships\r\n        });        \r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n\r\nexport const getPlanets = (arrayOfPlanets) => async (dispatch) => {\r\n\r\n    try {\r\n        let planets = await Promise.all(\r\n            arrayOfPlanets.map(async planetUrl => {\r\n                let planetResponse = await fetch(planetUrl)\r\n                return planetResponse.json()\r\n            })\r\n        )        \r\n    \r\n        dispatch({\r\n            type: GET_PLANETS,\r\n            payload: planets\r\n        });        \r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n\r\nexport const filteredFilms = (text) => (dispatch) => {\r\n\r\n    dispatch({\r\n        type: FILTERED_FILMS,\r\n        payload: text\r\n    })\r\n}\r\n\r\nexport const clearFilter = () => (dispatch) => {\r\n\r\n    dispatch({\r\n        type: CLEAR_FILTER\r\n    })\r\n}\r\n\r\nexport const sortAlphabetical = (type) => (dispatch) => {  \r\n\r\n    dispatch({\r\n        type: SORT,\r\n        payload: type\r\n    })\r\n}\r\n\r\nexport const getStarshipFilms = (arrayOfStarhipFilms, indexSth) => async (dispatch) => {\r\n\r\n    try {\r\n        let starshipFilms = await Promise.all(\r\n            arrayOfStarhipFilms.map(async shipFilmUrl => {\r\n                let shipFilmResponse = await fetch(shipFilmUrl)\r\n                return shipFilmResponse.json()\r\n            })\r\n        )        \r\n        let newItem = {\r\n                number: indexSth,\r\n                item: starshipFilms\r\n            }       \r\n      \r\n        dispatch({\r\n            type: GET_STARSHIP_FILMS,\r\n            payload:  newItem\r\n        });        \r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n\r\nexport const getPlanetFilms = (arrayOfPlanetFilms, indexSth) => async (dispatch) => {\r\n\r\n    try {\r\n        let planetFilms = await Promise.all(\r\n            arrayOfPlanetFilms.map(async planetFilmUrl => {\r\n                let planetFilmResponse = await fetch(planetFilmUrl)\r\n                return planetFilmResponse.json()\r\n            })\r\n        )    \r\n        let newItem = {\r\n                number: indexSth,\r\n                item: planetFilms\r\n            }        \r\n      \r\n        dispatch({\r\n            type: GET_PLANET_FILMS,\r\n            payload:  newItem\r\n        });        \r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};","export const GET_FILMS = \"GET_FILMS\";\r\nexport const GET_SINGLE_FILM = \"GET_SINGLE_FILM\";\r\nexport const GET_STARSHIPS = \"GET_STARSHIPS\";\r\nexport const GET_PLANETS = \"GET_PLANETS\";\r\nexport const FILTERED_FILMS = \"FILTERED_FILMS\";\r\nexport const CLEAR_FILTER = \"CLEAR_FILTER\";\r\nexport const SORT = \"SORT\";\r\nexport const GET_STARSHIP_FILMS = \"GET_STARSHIP_FILMS\";\r\nexport const GET_PLANET_FILMS = \"GET_PLANET_FILMS\";\r\n","import React, { Fragment, useEffect } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport FilmItem from './FilmItem';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getFilms, sortAlphabetical } from '../../actions/FilmsActions';\r\nimport FilmFilter from './FilmFilter';\r\n\r\n\r\nconst Films = ({ films, filtered, getFilms, sortAlphabetical }) => {\r\n\r\n    useEffect(() => {\r\n        getFilms();      \r\n    }, [getFilms])\r\n\r\n    if(films === undefined){\r\n        return <div className=\"loader\"></div>\r\n    } else {\r\n        return (\r\n            <Fragment>                \r\n                <FilmFilter />\r\n                <button className={filtered === null || filtered === undefined ? \"waves-effect waves-light btn\" : \"hide\"} onClick={() => {sortAlphabetical('asc')}}>Sort asc</button>\r\n                <button className={filtered === null || filtered === undefined ? \"waves-effect waves-light btn\" : \"hide\"} onClick={() => {sortAlphabetical('desc')}}>Sort desc</button>\r\n                <TransitionGroup>\r\n                    {\r\n                        filtered !== undefined && filtered !== null ? \r\n                            filtered.map((film, index) => (\r\n                                <CSSTransition key={film.episode_id} timeout={500} classNames=\"item\">\r\n                                    <FilmItem film={film} index={index} />\r\n                                </CSSTransition>                                \r\n                        )) :\r\n                            films.map((film, index) => (\r\n                                <CSSTransition key={film.episode_id} timeout={500} classNames=\"item\">\r\n                                    <FilmItem film={film} index={index} key={film.episode_id}  />\r\n                                </CSSTransition>                                \r\n                        )) \r\n                    }  \r\n                </TransitionGroup>                           \r\n            </Fragment>\r\n        )\r\n    } \r\n  \r\n};\r\n\r\nFilms.propTypes = {\r\n    films: PropTypes.array,   \r\n    filtered: PropTypes.array,   \r\n    getFilms: PropTypes.func.isRequired,\r\n    sortAlphabetical: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    films: state.films,\r\n    filtered: state.filtered,\r\n    sortType: state.sortType  \r\n})\r\n\r\nexport default connect(mapStateToProps, { getFilms, sortAlphabetical })(Films);\r\n\r\n","import React from 'react';\r\nimport Films from '../films/Films';\r\n\r\n\r\nconst Home = () => {        \r\n    \r\n    return (\r\n        <div className=\"container center\">  \r\n           <Films />\r\n        </div>\r\n    )\r\n}\r\n    \r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = ({ title }) => {\r\n    return (         \r\n        <nav className=\"nav-wrapper blue-grey darken-3 nav\">\r\n            <div className=\"container\">\r\n                <Link to=\"/\"><h4 className=\"brand-logo\">{title}</h4></Link>\r\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li><Link to=\"/About\">About</Link></li>                \r\n                </ul>\r\n            </div>\r\n        </nav>  \r\n    );\r\n};\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired    \r\n};\r\n\r\nNavbar.defaultProps = {\r\n    title: 'The Star Wars Films'    \r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h4>About this application</h4>\r\n            <hr />\r\n            <h5>This is a simple React/Redux app, that contains info about The Star Wars Films.</h5>           \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getStarshipFilms } from '../../actions/FilmsActions';\r\n\r\nconst StarshipItem = ({ starship, indexSth, starshipFilms, getStarshipFilms }) => {\r\n    return (        \r\n        <div className=\"col s12 m12\">                \r\n            <div className=\"card blue-grey darken-2\">\r\n                <div className=\"card-content white-text center\">                         \r\n                    <span className=\"card-title\">Starship Name: {starship.name}</span>\r\n                    <p>Model: {starship.model}</p>\r\n                    <p>Class: {starship.starship_class}</p>\r\n                    <p>Max Speed: {starship.max_atmosphering_speed}</p>\r\n                    <p>Crew: {starship.crew}</p>\r\n                    <p>Passengers: {starship.passengers}</p>\r\n\r\n                    <button onClick={() => getStarshipFilms(starship.films, indexSth)} className=\"waves-effect waves-light btn\">Show Films</button>\r\n                    {(starshipFilms !== undefined && starshipFilms.number === indexSth) ? starshipFilms.item.map((film, index) => <p key={index}>{film.title}</p>) : null}\r\n                </div>                       \r\n            </div>                  \r\n        </div>\r\n    )\r\n}\r\n\r\nStarshipItem.propTypes = {\r\n    starship: PropTypes.object.isRequired,\r\n    indexSth: PropTypes.number.isRequired,\r\n    starshipFilms: PropTypes.object,\r\n    getStarshipFilms: PropTypes.func.isRequired  \r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    starshipFilms: state.starshipFilms\r\n})\r\n\r\nexport default connect(mapStateToProps, { getStarshipFilms })(StarshipItem);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getPlanetFilms } from '../../actions/FilmsActions';\r\n\r\nconst PlanetItem = ({ planet, indexPln, planetFilms, getPlanetFilms }) => {\r\n    return (       \r\n        <div className=\"col s12 m12\">                \r\n            <div className=\"card blue-grey darken-2\">\r\n                <div className=\"card-content white-text center\">                         \r\n                    <span className=\"card-title\">Planet Name: {planet.name}</span>\r\n                    <p>Climat: {planet.climate}</p>\r\n                    <p>Gravity: {planet.gravity}</p>\r\n                    <p>Population: {planet.population}</p>\r\n                    <p>Diameter: {planet.diameter}</p>\r\n                    <p>Terrain: {planet.terrain}</p> \r\n\r\n                    <button onClick={() => getPlanetFilms(planet.films, indexPln)} className=\"waves-effect waves-light btn\">Show Films</button>\r\n                    {(planetFilms !== undefined && planetFilms.number === indexPln) ? planetFilms.item.map((film, index) => <p key={index}>{film.title}</p>) : null}                           \r\n                </div>                                   \r\n            </div>                  \r\n        </div>       \r\n    )\r\n}\r\n\r\nPlanetItem.propTypes = {\r\n    planet: PropTypes.object.isRequired,\r\n    indexPln: PropTypes.number.isRequired,\r\n    planetFilms: PropTypes.object,\r\n    getPlanetFilms: PropTypes.func.isRequired   \r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    planetFilms: state.planetFilms\r\n})\r\n\r\nexport default connect(mapStateToProps, { getPlanetFilms })(PlanetItem);\r\n\r\n\r\n\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport StarshipItem from './StarshipItem';\r\nimport PlanetItem from './PlanetItem';\r\nimport { getSingleFilm, getStarships,  getPlanets } from '../../actions/FilmsActions';\r\n\r\nconst Film = (props) => {\r\n    const { films, singleFilm, starships, planets, getSingleFilm, getStarships,  getPlanets } = props;\r\n\r\n    useEffect(() => { \r\n        if( films !== undefined ){ \r\n            getSingleFilm(films[Number(props.match.params.film_id)]); \r\n        }                       \r\n        //eslint-disable-next-line\r\n    }, []) \r\n    \r\n    \r\n    if(singleFilm === undefined || Object.entries(singleFilm).length === 0){  \r\n        return <div className=\"loader\"></div>\r\n    } else {\r\n        return (\r\n            <div className=\"container center\">                \r\n                <div className=\"row\">\r\n                    <div className=\"col s12 m12\">\r\n                        <div className=\"card blue-grey darken-2\">\r\n                            <div className=\"card-content white-text center\">\r\n                            <span className=\"card-title\">{singleFilm.title}</span>\r\n                                <p>Episode {singleFilm.episode_id}</p>\r\n                                <p>Director: {singleFilm.director}</p>\r\n                                <p>Producers: {singleFilm.producer}</p>\r\n                                <p>Release date: {singleFilm.release_date}</p>\r\n                                <br />\r\n                                <p>{singleFilm.opening_crawl}</p>                              \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12 m6\">\r\n                            <button onClick={() => getStarships(singleFilm.starships)} className=\"waves-effect waves-light btn\">Show Starships</button>                              \r\n                            {starships !== undefined && starships.map((starship, index) => <StarshipItem key={index} indexSth={index} starship={starship} />)} \r\n                        </div>\r\n                        <div className=\"col s12 m6\">\r\n                            <button onClick={() => getPlanets(singleFilm.planets)} className=\"waves-effect waves-light btn\">Show Planets</button>                              \r\n                            {planets !== undefined && planets.map((planet, index) => <PlanetItem key={index} ind={index} indexPln={index} planet={planet} />)}\r\n                        </div>\r\n                    </div>\r\n                </div>  \r\n            </div>  \r\n        )\r\n   } \r\n}\r\n\r\nFilm.propTypes = {\r\n    films: PropTypes.array,  \r\n    singleFilm: PropTypes.object,\r\n    starships: PropTypes.array,\r\n    planets: PropTypes.array,  \r\n    getSingleFilm: PropTypes.func.isRequired,\r\n    getStarships: PropTypes.func.isRequired,\r\n    getPlanets: PropTypes.func.isRequired \r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    singleFilm: state.singleFilm,\r\n    films: state.films,\r\n    starships: state.starships ,\r\n    planets: state.planets\r\n})\r\n\r\nexport default connect(mapStateToProps, { getSingleFilm, getStarships,  getPlanets })(Film);\r\n\r\n\r\n","import { GET_FILMS,\r\n    GET_SINGLE_FILM, \r\n    GET_STARSHIPS, \r\n    GET_PLANETS, \r\n    FILTERED_FILMS, \r\n    CLEAR_FILTER,    \r\n    SORT, \r\n    GET_STARSHIP_FILMS, \r\n    GET_PLANET_FILMS } from '../actions/Types';\r\n\r\nconst initialState = {\r\n    films: [],\r\n    singleFilm: {},\r\n    starships: [],\r\n    planets: [],\r\n    filtered: null,\r\n    starshipFilms: {},\r\n    planetFilms: {}\r\n      \r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type){\r\n        case GET_FILMS:\r\n            return {\r\n                ...state,\r\n                films: action.payload,\r\n                singleFilm: {},\r\n                starships: [],\r\n                planets: []                              \r\n            };\r\n        case GET_SINGLE_FILM:\r\n            return {\r\n                ...state,\r\n                singleFilm: action.payload,\r\n                filtered: null       \r\n            };\r\n        case GET_STARSHIPS: \r\n            return {\r\n                ...state,\r\n                starships: action.payload\r\n            };\r\n        case GET_PLANETS:\r\n            return {\r\n                ...state,\r\n                planets: action.payload\r\n            };\r\n        case FILTERED_FILMS:\r\n            return {\r\n                ...state,\r\n                filtered: state.films.filter(film => {\r\n                    const regex = new RegExp(`${action.payload}`, 'gi');\r\n                    return film.title.match(regex);\r\n                })\r\n            };\r\n        case CLEAR_FILTER:\r\n            return {\r\n                ...state,\r\n                filtered: null\r\n            };      \r\n        case SORT:          \r\n            if (action.payload === 'asc'){\r\n                return {             \r\n                    ...state,\r\n                    films: state.films.slice().sort(function(a, b) {\r\n                        var nameA = a.title.toLowerCase(),\r\n                            nameB = b.title.toLowerCase()\r\n                        if (nameA < nameB)\r\n                            return -1\r\n                        if (nameA > nameB)\r\n                            return 1\r\n                        return 0\r\n                        })\r\n                }\r\n            } else {\r\n                return {             \r\n                    ...state,\r\n                    films: state.films.slice().sort(function(a, b) {\r\n                        var nameA = a.title.toLowerCase(),\r\n                            nameB = b.title.toLowerCase()\r\n                        if (nameA < nameB)\r\n                            return 1\r\n                        if (nameA > nameB)\r\n                            return -1\r\n                        return 0\r\n                        })\r\n                }\r\n            };\r\n        case GET_STARSHIP_FILMS:           \r\n            return {\r\n                ...state,\r\n                starshipFilms: action.payload  \r\n            };\r\n        case GET_PLANET_FILMS:\r\n            return {\r\n                ...state,\r\n                planetFilms: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport FilmsReducer from './reducers/FilmsReducer';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(FilmsReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\nexport default store;","import React from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport Home from './components/pages/Home';\r\nimport Navbar from './components/layout/Navbar';\r\nimport About from './components/pages/About';\r\nimport Film from './components/films/Film';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\nimport './App.css';\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <div className=\"App\">\r\n          <Navbar />        \r\n          <Switch>\r\n            <Route exact path='/' component={Home} />\r\n            <Route exact path='/about' component={About} />\r\n            <Route path=\"/:film_id\" component={Film} />\r\n          </Switch>     \r\n        </div>\r\n      </HashRouter> \r\n    </Provider>    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}